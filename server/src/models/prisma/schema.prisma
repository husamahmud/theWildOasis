datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

enum Status {
  CHECKED_IN
  CHECKED_OUT
  UNCONFIRMED
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  username String  @unique
  email    String  @unique
  password String
  avatar   String?

  refreshTokens RefreshToken[]
}

model RefreshToken {
  id String @id @default(uuid())

  token     String    @unique
  issuedAt  DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Guests {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  fullName    String
  email       String @unique
  nationalID  String @unique
  nationality String
  countryFlag String

  Bookings Bookings[]
}

model Cabins {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  cabinNumber  String @unique
  maxCapacity  Int
  regularPrice Float
  discount     Float
  description  String
  image        String

  Bookings Bookings[]
}

model Bookings {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  startDate    DateTime
  endDate      DateTime
  numNight     Int
  numGuest     Int
  cabinPrice   Float
  totalPrice   Float
  status       Status   @default(UNCONFIRMED)
  hasBreakfast Boolean
  isPaid       Boolean
  observation  String

  cabinId String
  guestId String

  guest Guests @relation(fields: [guestId], references: [id])
  cabin Cabins @relation(fields: [cabinId], references: [id])
}

model Settings {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  minBookingLen Int
  maxBookingLen Int
  maxGuests     Int
  breakfastCost Float
}
